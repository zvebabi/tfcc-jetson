#!/bin/bash

set -e

bazel_version="0.27.1"
tensorflow_cc_version="v2.1.0" 

# Validate environment
if ! which cmake; then
  sudo apt-get -y install cmake
fi

if ! which curl; then
  sudo apt-get -y install curl
fi

if ! which javac; then
  sudo apt-get -y install openjdk-8-jdk-headless
fi

if [[ "$( free | awk '$1 == "Mem:" { print $7 }' )" -lt 8000000 ]]; then
  if [[ -z "$( free | awk '$1 == "Swap:"' )" ]]; then
    echo "Configure a swap partition or file first (8GB+ recommended)."
    exit 1
  fi
fi

# Install bazel
if ! which bazel; then
  if [[ ! -d "bazel-${bazel_version}-dist" ]]; then
    wget "https://github.com/bazelbuild/bazel/releases/download/${bazel_version}/bazel-${bazel_version}-dist.zip"
    unzip "bazel-${bazel_version}-dist.zip" -d bazel-${bazel_version}-dist
  fi

  cd "bazel-${bazel_version}-dist"

  if [[ ! -f "output/bazel" ]]; then
    env EXTRA_BAZEL_ARGS="--host_javabase=@local_jdk//:jdk" bash ./compile.sh
    sudo cp output/bazel /usr/local/bin/
  fi

  cd ..
fi

# Install tensorflow_cc
if [[ ! -f "/usr/local/lib/tensorflow_cc/libtensorflow_cc.so" ]]; then

  cd tensorflow_cc/tensorflow_cc

  # Patch to use newer TF tag which support aarch64
  sed -i -e  "s/v1.13.1/${tensorflow_cc_version}/g" CMakeLists.txt

  # Patch to disable NCCL
  sed -i -e 's/--config=monolithic \\/--config=monolithic --config=nonccl --config=noaws --config=nogcp --config=nohdfs\\/' \
      -e '/^export NCCL_INSTALL_PATH/d' \
      -e '/^export TF_NCCL_VERSION/d' \
      cmake/build_tensorflow.sh.in

  if [[ ! -d build ]]; then
    mkdir build
  fi

  cd build

  export CC_OPT_FLAGS="-march=native"
  export TF_ENABLE_XLA=0
  cmake -DTENSORFLOW_STATIC=OFF -DTENSORFLOW_SHARED=ON ..

  nice make
  sudo make install

  sudo mv -f /usr/local/lib/tensorflow_cc/libtensorflow_cc.so{,.2}
  sudo ln -sf /usr/local/lib/tensorflow_cc/libtensorflow_cc.so{.2,}

  cd .. # build
  cd .. # tensorflow_cc
  cd .. # tensorflow_cc

fi
